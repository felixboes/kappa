#ifndef MONOCOMPLEX_H
#define MONOCOMPLEX_H

#include <stdint.h>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <omp.h>
#include <set>
#include <vector>

#include <homology>

#include "factorial.hpp"
#include "tuple.hpp"


/**
    The MonoBasis keeps track of the basis elements of a module in a MonoComplex.
**/
struct MonoBasis
{
    /// Add a basis element.
    void add_basis_element (Tuple& t);
    
    /// output stream
    friend std::ostream& operator<< (std::ostream& stream, const MonoBasis& mb);
    
    /// Returns the number of basis elements.
    uint64_t size();

    /// Stores the orderd basis.
    std::vector< Tuple > basis;
};

std::ostream& operator<< (std::ostream& stream, const MonoBasis& basis);

/**
    This MonoComplex represents a chain complex which is generated by the monotone tuples of transpositions. 
**/
template< class MatrixComplex >
class MonoComplex
{
public:
    MonoComplex(uint32_t genus, uint32_t num_punctures);
    /** Recursive function initializing the basis_complex.
        In the call of gen_bases with the parameters l, p and tuple, we assume that the first l transpositions
        containing symbols 1, ..., p are fixed and append all possible transpositions at position l+1, applying 	the function recursively in an appropriate way.
        If l == h, we don't append another transposition since we have completed a possible basis element. 
        We check whether its number of cycles is appropriate for it to be a basis element, and if this is
        the case, we add it to the basis in degree p.
    **/
    void gen_bases(uint32_t l, uint32_t p, Tuple& tuple); 
    void gen_differential(int32_t p);                     ///< generate the p-th differential 
    void gen_differentials();                             ///< generate all differentials

private:
    uint32_t g;     ///< genus
    uint32_t m;     ///< number of punctures
    uint32_t h;     ///< h = 2*g+m
    
    MatrixComplex matrix_complex;                         ///< underlying matrix complex of this MonoComplex
    std::map< uint32_t, MonoBasis > basis_complex;        ///< basis_complex[n] is the n-th MonoBasis, i.e. the basis of the n-th module of this MonoComplex.
};

#endif // MONOCOMPLEX_H
